{"version":3,"sources":["require/text.js","forms/tasks/anchor/view.html!text","../CustomSpace/Scripts/forms/tasks/resolveIncident/view.html!text","forms/fields/enum/view.html!text","forms/fields/enum/controller.js","../CustomSpace/Scripts/forms/fields/longstring/view.html!text","../CustomSpace/Scripts/forms/fields/longstring/controller.js","forms/fields/boolean/view.html!text","forms/fields/boolean/controller.js","../CustomSpace/Scripts/forms/tasks/resolveIncident/controller.js","../CustomSpace/Scripts/forms/wiTaskBuilder.js","../CustomSpace/Scripts/forms/wiTaskMain.js"],"names":["define","module","text","fs","Cc","Ci","xpcIsWindows","progIds","xmlRegExp","bodyRegExp","hasLocation","location","href","defaultProtocol","protocol","replace","defaultHostName","hostname","defaultPort","port","undefined","buildMap","masterConfig","config","version","strip","content","matches","match","jsEscape","createXhr","xhr","i","progId","XMLHttpRequest","ActiveXObject","e","parseName","name","modName","ext","temp","index","indexOf","isRelative","substring","length","moduleName","xdRegExp","useXhr","url","uProtocol","uHostName","uPort","exec","split","toLowerCase","finishLoad","onLoad","isBuild","load","req","inlineText","parsed","nonStripName","toUrl","get","err","error","write","pluginName","hasOwnProperty","asModule","writeFile","extPart","fileName","value","textWrite","contents","env","process","versions","node","require","nodeRequire","callback","errback","file","readFileSync","headers","header","open","setRequestHeader","onXhr","onreadystatechange","evt","status","readyState","Error","responseText","onXhrComplete","send","Packages","java","stringBuffer","line","io","File","lineSeparator","lang","System","getProperty","input","BufferedReader","InputStreamReader","FileInputStream","StringBuffer","readLine","charAt","append","String","toString","close","Components","classes","interfaces","utils","inStream","convertStream","fileObj","readData","FileUtils","createInstance","nsIFileInputStream","init","nsIConverterInputStream","available","DEFAULT_REPLACEMENT_CHARACTER","readString","path","tpl","template","build","vm","built","_","properties","EnumId","Required","Disabled","disabled","LeafNodeOnly","ShowPath","FilterIds","$","extend","longStringTemplate","getFieldViewModel","fieldProperties","CharactersRemaining","MaxLength","CheckLength","setTimeout","elem","currentTarget","helpBlock","next","maxChars","attr","val","show","hide","removeAttr","data","TextCounter","this","set","ResolutionDescription","kendo","observable","isUndefined","PropertyName","buildAndRender","fieldEle","fieldViewModel","fieldTemplate","builtField","fieldElm","View","wrap","model","render","fieldTemplateProps","MinLength","LimitLength","Rows","visible","IsVisible","Inline","anchorTemplate","resolveIncidentTemplate","enumPickerControl","txtAreaControl","checkBoxControl","resolveIncidentTask","Task","Type","Label","Access","session","user","Analyst","Configs","ResolutionCategory","Id","Name","description","incidentStatusResolvedEnumId","task","buildEnumPicker","container","props","vmModel","enumControl","html","app","controls","apply","localize","bind","buildTextArea","cbTxtAreaControl","buildCheckbox","txtCheckboxControl","createPopupNotification","message","popupNotificationElm","popupNotification","getKendoNotification","kendoNotification","templates","type","custom","stringFormat","viewModel","createIncidentResolutionFields","modalWindowViewModel","modalWindowEle","resolutionProperties","PropertyDisplayName","resolutionCategoryEnumId","resolutionDescriptionProperties","PlaceHolder","resolutionAssignToMeProperties","Checked","find","performResolveIncident","actionLogType","getWorkItemLogType","resolvedDateElement","Date","toISOString","ClassTypeId","BaseId","DisplayName","unshift","dataModels","recordResolved","showResolutionAssignToMe","ResolutionAssignToMe","AssignedWorkItem","onModalUpdate","hasClass","onModalActivate","focus","bindResolutionCategoryFieldEvents","onModalUpdateHandler","resolutionCategoryDropDownTreeViewControl","_dropdown","keyup","_treeview","isAssignedToMe","getFormTaskViewModel","modalEle","resolveIncident","modalWindowControl","click","element","kendoCiresonWindow","title","width","minWidth","height","activate","okEnabled","okClick","cancelClick","storage","console","log","removeClass","wrapper","css","windowEle","windowTemplate","builtModal","ele","taskListItem","anchorViewModel","builtAnchor","anchorElm","formTaskViewModel","anchorTemplateProps","Target","taskModules","arguments","ulElement","taskCallback","view","performance","now","each","taskModule","waitSeconds","urlArgs","staticFileVersion","baseUrl","paths","CustomSpace","wiTaskBuilder","initTasks","isClosed","pageForm","newWI","Status","sortList","events","publish","subscribe","execInitTasks","boundReady","unsubscribe"],"mappings":"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","file":"wiTaskMain-built.min.js","sourcesContent":["/**\r\n * @license RequireJS text 2.0.10 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\r\n * Available via the MIT or new BSD license.\r\n * see: http://github.com/requirejs/text for details\r\n */\r\n/*jslint regexp: true */\r\n/*global require, XMLHttpRequest, ActiveXObject,\r\n  define, window, process, Packages,\r\n  java, location, Components, FileUtils */\r\n\r\ndefine('text',['module'], function (module) {\r\n    'use strict';\r\n\r\n    var text, fs, Cc, Ci, xpcIsWindows,\r\n        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],\r\n        xmlRegExp = /^\\s*<\\?xml(\\s)+version=[\\'\\\"](\\d)*.(\\d)*[\\'\\\"](\\s)*\\?>/im,\r\n        bodyRegExp = /<body[^>]*>\\s*([\\s\\S]+)\\s*<\\/body>/im,\r\n        hasLocation = typeof location !== 'undefined' && location.href,\r\n        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\\:/, ''),\r\n        defaultHostName = hasLocation && location.hostname,\r\n        defaultPort = hasLocation && (location.port || undefined),\r\n        buildMap = {},\r\n        masterConfig = (module.config && module.config()) || {};\r\n\r\n    text = {\r\n        version: '2.0.10',\r\n\r\n        strip: function (content) {\r\n            //Strips <?xml ...?> declarations so that external SVG and XML\r\n            //documents can be added to a document without worry. Also, if the string\r\n            //is an HTML document, only the part inside the body tag is returned.\r\n            if (content) {\r\n                content = content.replace(xmlRegExp, \"\");\r\n                var matches = content.match(bodyRegExp);\r\n                if (matches) {\r\n                    content = matches[1];\r\n                }\r\n            } else {\r\n                content = \"\";\r\n            }\r\n            return content;\r\n        },\r\n\r\n        jsEscape: function (content) {\r\n            return content.replace(/(['\\\\])/g, '\\\\$1')\r\n                .replace(/[\\f]/g, \"\\\\f\")\r\n                .replace(/[\\b]/g, \"\\\\b\")\r\n                .replace(/[\\n]/g, \"\\\\n\")\r\n                .replace(/[\\t]/g, \"\\\\t\")\r\n                .replace(/[\\r]/g, \"\\\\r\")\r\n                .replace(/[\\u2028]/g, \"\\\\u2028\")\r\n                .replace(/[\\u2029]/g, \"\\\\u2029\");\r\n        },\r\n\r\n        createXhr: masterConfig.createXhr || function () {\r\n            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.\r\n            var xhr, i, progId;\r\n            if (typeof XMLHttpRequest !== \"undefined\") {\r\n                return new XMLHttpRequest();\r\n            } else if (typeof ActiveXObject !== \"undefined\") {\r\n                for (i = 0; i < 3; i += 1) {\r\n                    progId = progIds[i];\r\n                    try {\r\n                        xhr = new ActiveXObject(progId);\r\n                    } catch (e) { }\r\n\r\n                    if (xhr) {\r\n                        progIds = [progId];  // so faster next time\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return xhr;\r\n        },\r\n\r\n        /**\r\n         * Parses a resource name into its component parts. Resource names\r\n         * look like: module/name.ext!strip, where the !strip part is\r\n         * optional.\r\n         * @param {String} name the resource name\r\n         * @returns {Object} with properties \"moduleName\", \"ext\" and \"strip\"\r\n         * where strip is a boolean.\r\n         */\r\n        parseName: function (name) {\r\n            var modName, ext, temp,\r\n                strip = false,\r\n                index = name.indexOf(\".\"),\r\n                isRelative = name.indexOf('./') === 0 ||\r\n                             name.indexOf('../') === 0;\r\n\r\n            if (index !== -1 && (!isRelative || index > 1)) {\r\n                modName = name.substring(0, index);\r\n                ext = name.substring(index + 1, name.length);\r\n            } else {\r\n                modName = name;\r\n            }\r\n\r\n            temp = ext || modName;\r\n            index = temp.indexOf(\"!\");\r\n            if (index !== -1) {\r\n                //Pull off the strip arg.\r\n                strip = temp.substring(index + 1) === \"strip\";\r\n                temp = temp.substring(0, index);\r\n                if (ext) {\r\n                    ext = temp;\r\n                } else {\r\n                    modName = temp;\r\n                }\r\n            }\r\n\r\n            return {\r\n                moduleName: modName,\r\n                ext: ext,\r\n                strip: strip\r\n            };\r\n        },\r\n\r\n        xdRegExp: /^((\\w+)\\:)?\\/\\/([^\\/\\\\]+)/,\r\n\r\n        /**\r\n         * Is an URL on another domain. Only works for browser use, returns\r\n         * false in non-browser environments. Only used to know if an\r\n         * optimized .js version of a text resource should be loaded\r\n         * instead.\r\n         * @param {String} url\r\n         * @returns Boolean\r\n         */\r\n        useXhr: function (url, protocol, hostname, port) {\r\n            var uProtocol, uHostName, uPort,\r\n                match = text.xdRegExp.exec(url);\r\n            if (!match) {\r\n                return true;\r\n            }\r\n            uProtocol = match[2];\r\n            uHostName = match[3];\r\n\r\n            uHostName = uHostName.split(':');\r\n            uPort = uHostName[1];\r\n            uHostName = uHostName[0];\r\n\r\n            return (!uProtocol || uProtocol === protocol) &&\r\n                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&\r\n                   ((!uPort && !uHostName) || uPort === port);\r\n        },\r\n\r\n        finishLoad: function (name, strip, content, onLoad) {\r\n            content = strip ? text.strip(content) : content;\r\n            if (masterConfig.isBuild) {\r\n                buildMap[name] = content;\r\n            }\r\n            onLoad(content);\r\n        },\r\n\r\n        load: function (name, req, onLoad, config) {\r\n            //Name has format: some.module.filext!strip\r\n            //The strip part is optional.\r\n            //if strip is present, then that means only get the string contents\r\n            //inside a body tag in an HTML string. For XML/SVG content it means\r\n            //removing the <?xml ...?> declarations so the content can be inserted\r\n            //into the current doc without problems.\r\n\r\n            // Do not bother with the work if a build and text will\r\n            // not be inlined.\r\n            if (config.isBuild && !config.inlineText) {\r\n                onLoad();\r\n                return;\r\n            }\r\n\r\n            masterConfig.isBuild = config.isBuild;\r\n\r\n            var parsed = text.parseName(name),\r\n                nonStripName = parsed.moduleName +\r\n                    (parsed.ext ? '.' + parsed.ext : ''),\r\n                url = req.toUrl(nonStripName),\r\n                useXhr = (masterConfig.useXhr) ||\r\n                         text.useXhr;\r\n\r\n            // Do not load if it is an empty: url\r\n            if (url.indexOf('empty:') === 0) {\r\n                onLoad();\r\n                return;\r\n            }\r\n\r\n            //Load the text. Use XHR if possible and in a browser.\r\n            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {\r\n                text.get(url, function (content) {\r\n                    text.finishLoad(name, parsed.strip, content, onLoad);\r\n                }, function (err) {\r\n                    if (onLoad.error) {\r\n                        onLoad.error(err);\r\n                    }\r\n                });\r\n            } else {\r\n                //Need to fetch the resource across domains. Assume\r\n                //the resource has been optimized into a JS module. Fetch\r\n                //by the module name + extension, but do not include the\r\n                //!strip part to avoid file system issues.\r\n                req([nonStripName], function (content) {\r\n                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,\r\n                                    parsed.strip, content, onLoad);\r\n                });\r\n            }\r\n        },\r\n\r\n        write: function (pluginName, moduleName, write, config) {\r\n            if (buildMap.hasOwnProperty(moduleName)) {\r\n                var content = text.jsEscape(buildMap[moduleName]);\r\n                write.asModule(pluginName + \"!\" + moduleName,\r\n                               \"define(function () { return '\" +\r\n                                   content +\r\n                               \"';});\\n\");\r\n            }\r\n        },\r\n\r\n        writeFile: function (pluginName, moduleName, req, write, config) {\r\n            var parsed = text.parseName(moduleName),\r\n                extPart = parsed.ext ? '.' + parsed.ext : '',\r\n                nonStripName = parsed.moduleName + extPart,\r\n                //Use a '.js' file name so that it indicates it is a\r\n                //script that can be loaded across domains.\r\n                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';\r\n\r\n            //Leverage own load() method to load plugin value, but only\r\n            //write out values that do not have the strip argument,\r\n            //to avoid any potential issues with ! in file names.\r\n            text.load(nonStripName, req, function (value) {\r\n                //Use own write() method to construct full module value.\r\n                //But need to create shell that translates writeFile's\r\n                //write() to the right interface.\r\n                var textWrite = function (contents) {\r\n                    return write(fileName, contents);\r\n                };\r\n                textWrite.asModule = function (moduleName, contents) {\r\n                    return write.asModule(moduleName, fileName, contents);\r\n                };\r\n\r\n                text.write(pluginName, nonStripName, textWrite, config);\r\n            }, config);\r\n        }\r\n    };\r\n\r\n    if (masterConfig.env === 'node' || (!masterConfig.env &&\r\n            typeof process !== \"undefined\" &&\r\n            process.versions &&\r\n            !!process.versions.node &&\r\n            !process.versions['node-webkit'])) {\r\n        //Using special require.nodeRequire, something added by r.js.\r\n        fs = require.nodeRequire('fs');\r\n\r\n        text.get = function (url, callback, errback) {\r\n            try {\r\n                var file = fs.readFileSync(url, 'utf8');\r\n                //Remove BOM (Byte Mark Order) from utf8 files if it is there.\r\n                if (file.indexOf('\\uFEFF') === 0) {\r\n                    file = file.substring(1);\r\n                }\r\n                callback(file);\r\n            } catch (e) {\r\n                errback(e);\r\n            }\r\n        };\r\n    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&\r\n            text.createXhr())) {\r\n        text.get = function (url, callback, errback, headers) {\r\n            var xhr = text.createXhr(), header;\r\n            xhr.open('GET', url, true);\r\n\r\n            //Allow plugins direct access to xhr headers\r\n            if (headers) {\r\n                for (header in headers) {\r\n                    if (headers.hasOwnProperty(header)) {\r\n                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            //Allow overrides specified in config\r\n            if (masterConfig.onXhr) {\r\n                masterConfig.onXhr(xhr, url);\r\n            }\r\n\r\n            xhr.onreadystatechange = function (evt) {\r\n                var status, err;\r\n                //Do not explicitly handle errors, those should be\r\n                //visible via console output in the browser.\r\n                if (xhr.readyState === 4) {\r\n                    status = xhr.status;\r\n                    if (status > 399 && status < 600) {\r\n                        //An http 4xx or 5xx error. Signal an error.\r\n                        err = new Error(url + ' HTTP status: ' + status);\r\n                        err.xhr = xhr;\r\n                        errback(err);\r\n                    } else {\r\n                        callback(xhr.responseText);\r\n                    }\r\n\r\n                    if (masterConfig.onXhrComplete) {\r\n                        masterConfig.onXhrComplete(xhr, url);\r\n                    }\r\n                }\r\n            };\r\n            xhr.send(null);\r\n        };\r\n    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&\r\n            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {\r\n        //Why Java, why is this so awkward?\r\n        text.get = function (url, callback) {\r\n            var stringBuffer, line,\r\n                encoding = \"utf-8\",\r\n                file = new java.io.File(url),\r\n                lineSeparator = java.lang.System.getProperty(\"line.separator\"),\r\n                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),\r\n                content = '';\r\n            try {\r\n                stringBuffer = new java.lang.StringBuffer();\r\n                line = input.readLine();\r\n\r\n                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324\r\n                // http://www.unicode.org/faq/utf_bom.html\r\n\r\n                // Note that when we use utf-8, the BOM should appear as \"EF BB BF\", but it doesn't due to this bug in the JDK:\r\n                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058\r\n                if (line && line.length() && line.charAt(0) === 0xfeff) {\r\n                    // Eat the BOM, since we've already found the encoding on this file,\r\n                    // and we plan to concatenating this buffer with others; the BOM should\r\n                    // only appear at the top of a file.\r\n                    line = line.substring(1);\r\n                }\r\n\r\n                if (line !== null) {\r\n                    stringBuffer.append(line);\r\n                }\r\n\r\n                while ((line = input.readLine()) !== null) {\r\n                    stringBuffer.append(lineSeparator);\r\n                    stringBuffer.append(line);\r\n                }\r\n                //Make sure we return a JavaScript string and not a Java string.\r\n                content = String(stringBuffer.toString()); //String\r\n            } finally {\r\n                input.close();\r\n            }\r\n            callback(content);\r\n        };\r\n    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&\r\n            typeof Components !== 'undefined' && Components.classes &&\r\n            Components.interfaces)) {\r\n        //Avert your gaze!\r\n        Cc = Components.classes,\r\n        Ci = Components.interfaces;\r\n        Components.utils['import']('resource://gre/modules/FileUtils.jsm');\r\n        xpcIsWindows = ('@mozilla.org/windows-registry-key;1' in Cc);\r\n\r\n        text.get = function (url, callback) {\r\n            var inStream, convertStream, fileObj,\r\n                readData = {};\r\n\r\n            if (xpcIsWindows) {\r\n                url = url.replace(/\\//g, '\\\\');\r\n            }\r\n\r\n            fileObj = new FileUtils.File(url);\r\n\r\n            //XPCOM, you so crazy\r\n            try {\r\n                inStream = Cc['@mozilla.org/network/file-input-stream;1']\r\n                           .createInstance(Ci.nsIFileInputStream);\r\n                inStream.init(fileObj, 1, 0, false);\r\n\r\n                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']\r\n                                .createInstance(Ci.nsIConverterInputStream);\r\n                convertStream.init(inStream, \"utf-8\", inStream.available(),\r\n                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);\r\n\r\n                convertStream.readString(inStream.available(), readData);\r\n                convertStream.close();\r\n                inStream.close();\r\n                callback(readData.value);\r\n            } catch (e) {\r\n                throw new Error((fileObj && fileObj.path || '') + ': ' + e);\r\n            }\r\n        };\r\n    }\r\n    return text;\r\n});\n","\ndefine('text!forms/tasks/anchor/view.html',[],function () { return '<li class=\"link\" data-bind=\"click: <%= Target %>\"><%= Label %></li>';});\n\n","\ndefine('text!CustomSpace/Scripts/forms/tasks/resolveIncident/view.html',[],function () { return '<div id=\"ResolveIncidentWindow\" class=\"cireson-window defined-form hide\" style=\"padding-bottom: 0px;\">\\r\\n    <div class=\"cireson-window--wrapper\">\\r\\n        <div class=\"cireson-window--body\">\\r\\n            <div id=\"resolutionPicker\" data-bind=\"\" />\\r\\n            <div id=\"resolutionDescription\" data-bind=\"\" />\\r\\n            <div id=\"resolutionAssignToMe\" data-bind=\"visible: showResolutionAssignToMe\" />\\r\\n        </div>\\r\\n        <div class=\"window-buttons cireson-window--footer\" style=\"line-height: 65px; height: 65px\">\\r\\n            <div id=\"resolveIncidentErrorWin\" class=\"error\"></div>\\r\\n            <button data-role=\"button\"\\r\\n                    class=\"btn btn-primary\"\\r\\n                    data-bind=\"enabled: okEnabled, events: { click: okClick }\">\\r\\n                <%= localization.OK %>\\r\\n            </button>\\r\\n            <button data-role=\"button\"\\r\\n                    class=\"btn btn-default\"\\r\\n                    data-bind=\"events: { click: cancelClick }\">\\r\\n                <%= localization.Cancel %>\\r\\n            </button>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>';});\n\n","\ndefine('text!forms/fields/enum/view.html',[],function () { return '<div class=\"form-group\">\\r\\n    <label class=\"control-label\" for=\"<%= PropertyName %>\" data-localize=\"<%= PropertyDisplayName %>\">\\r\\n        <span><% if ( Required ){ %> <%= \\'(\\' + localization.Required + \\')\\' %><% } %></span>\\r\\n    </label>\\r\\n\\r\\n    <div class=\"form-control form-control-picker input-sm\"\\r\\n         data-url=\"/api/V3/Enum/GetList\"\\r\\n         data-combourl=\"/api/V3/Enum/GetFlatList/\"\\r\\n         data-showpath=\"<%= ShowPath %>\"\\r\\n         data-mustselectleafnode=\"<%= LeafNodeOnly %>\"\\r\\n         data-bind=\"ciresonDropDownTree: \\'<%= EnumId %>\\', value: <%= PropertyName %>\"\\r\\n         data-disabled=\"<%= Disabled %>\"\\r\\n         data-role=\"<%= PropertyName %>\"\\r\\n         data-filter=\"<%= FilterIds%>\"\\r\\n        <% if ( Required ){ %>\\r\\n        required\\r\\n        <% } %>\\r\\n        >\\r\\n\\r\\n    </div>\\r\\n\\r\\n</div>';});\n\n","/**\r\nENUM - dropDownTree\r\n**/\r\n\r\ndefine('forms/fields/enum/controller',['require','text!forms/fields/enum/view.html'],function (require) {\r\n    var tpl = require(\"text!forms/fields/enum/view.html\");\r\n   \r\n\r\n    var definition = {\r\n        template: tpl,\r\n        build: function (vm, node, callback) {\r\n            var built = _.template(tpl);\r\n\r\n            //make sure we have all the vals set\r\n\r\n            var properties = {\r\n                EnumId: '',\r\n                Required: node.Required,\r\n                Disabled: node.disabled,\r\n                LeafNodeOnly: false,\r\n                ShowPath: false,\r\n                FilterIds: ''\r\n            };\r\n\r\n            $.extend(true, properties, node);\r\n            callback(built(properties));\r\n        }\r\n    }\r\n\r\n    return definition;\r\n\r\n});\n","\ndefine('text!CustomSpace/Scripts/forms/fields/longstring/view.html',[],function () { return '<div class=\"form-group <%= visible %>\" style=\"\">\\r\\n\\r\\n    <label class=\"control-label\" for=\"<%= PropertyName %>\">\\r\\n        <span><%= PropertyDisplayName %> <% if (Required) { %> (<%= localization.Required %>)<% } %></span>\\r\\n        <span style=\"font-weight: normal; float:right; color: #6E8B9B;\">\\r\\n            <span name=\"<%= PropertyName %>CharactersRemaining\" data-bind=\"html: CharactersRemaining\"></span>\\r\\n            <span>characters remaining</span>\\r\\n        </span>\\r\\n    </label>\\r\\n    <textarea name=\"<%= PropertyName %>\"\\r\\n              class=\"k-textbox form-control input-sm\"\\r\\n              rows=\"<%= Rows %>\"\\r\\n              placeholder=\"<%= PlaceHolder %>\"\\r\\n              data-bind=\"value: <%= PropertyName %>, events : { <% if ( LimitLength ){ %>blur: CheckLength<% } %>, keyup: TextCounter }\"\\r\\n              data-value-update=\"keyup\"\\r\\n            <% if (LimitLength) { %>\\r\\n              maxlength=\"<%= MaxLength %>\"\\r\\n            <% } %>\\r\\n            <% if (Disabled) { %>\\r\\n              disabled\\r\\n            <% } %>\\r\\n            <% if (Required) { %>\\r\\n              required\\r\\n            <% } %>\\r\\n    >\\r\\n    </textarea>\\r\\n    <% if (LimitLength) { %>\\r\\n    <p class=\"help-block validation-summary-errors\" style=\"display: none;\"><%= localization.MaxLengthError.replace(\"{0}\", MaxLength) %></p>\\r\\n    <% } %>\\r\\n</div>\\r\\n<script>\\r\\n    $(\"textarea[name=\\'ResolutionDescription\\']\").removeClass(\"form-control\");\\r\\n</script>';});\n\n","/*jslint nomen: true */\r\n/*global _, $, define, kendo, setTimeout */\r\n/*eslint no-console: [\"error\", { allow: [\"log\", \"warn\", \"error\"] }] */\r\n\r\n/**\r\nLONGSTRING\r\n**/\r\n\r\ndefine('CustomSpace/Scripts/forms/fields/longstring/controller',[\r\n    \"text!CustomSpace/Scripts/forms/fields/longstring/view.html\"\r\n], function (longStringTemplate) {\r\n    \"use strict\";\r\n    var definition = {\r\n        template: longStringTemplate,\r\n        build: function build(vm, node, callback) {\r\n            if (_.isUndefined(vm[node.PropertyName])) {\r\n                vm[node.PropertyName] = [];\r\n            }\r\n\r\n            function getFieldViewModel(properties) {\r\n                var fieldProperties = {\r\n                    CharactersRemaining: properties.MaxLength,\r\n                    CheckLength: function checkLength(e) { //blur event\r\n                        setTimeout(function () {\r\n                            var elem = $(e.currentTarget),\r\n                                helpBlock = elem.next(),\r\n                                maxChars = elem.attr(\"maxlength\"),\r\n                                count = elem.val().length;\r\n                            if (count > maxChars) {\r\n                                elem.attr(\"data-invalid\", \"\");\r\n                                helpBlock.show();\r\n                            } else {\r\n                                helpBlock.hide();\r\n                                elem.removeAttr(\"data-invalid\");\r\n                                elem.data(\"prevent\", false);\r\n                            }\r\n                        }, 100);\r\n                    },\r\n                    TextCounter: function textCounter() {\r\n                        this.set(\"CharactersRemaining\", this.MaxLength - this.ResolutionDescription.length);\r\n                    }\r\n                },\r\n                    fieldViewModel = kendo.observable($.extend(true, fieldProperties, properties));\r\n\r\n                return fieldViewModel;\r\n            }\r\n\r\n            //template .build() and view.renderererers.\r\n            var buildAndRender = {\r\n                fieldEle: function fieldEle(properties, fieldViewModel, fieldTemplate) {\r\n                    $.extend(true, properties, node);\r\n                    // build the field and bind viewmOdel to it\r\n                    var builtField = _.template(fieldTemplate),\r\n                        fieldElm = new kendo.View(builtField(properties), { wrap: false, model: fieldViewModel});\r\n\r\n                    //send hidden window back to caller (appended in the callback)\r\n                    if (typeof callback === \"function\") {\r\n                        callback(fieldElm.render());\r\n                    }\r\n                    return fieldElm;\r\n                }\r\n            };\r\n\r\n            function initField() {\r\n                var fieldTemplateProps = {\r\n                    Required: node.Required,\r\n                    Disabled: node.disabled,\r\n                    MinLength: node.MinLength,\r\n                    MaxLength: node.MaxLength,\r\n                    LimitLength: (!_.isUndefined(node.MinLength) || !_.isUndefined(node.MaxLength)),\r\n                    Rows: node.Rows || 5,\r\n                    visible: (!_.isUndefined(node.IsVisible) && node.IsVisible === false ? \"hidden\" : \"\")\r\n                },\r\n                    fieldViewModel = getFieldViewModel(fieldTemplateProps),\r\n                    fieldEle = buildAndRender.fieldEle(fieldTemplateProps, fieldViewModel, longStringTemplate);\r\n\r\n                vm[node.PropertyName] = fieldViewModel;\r\n                return fieldEle;\r\n            }\r\n\r\n            return initField();\r\n        }\r\n    };\r\n\r\n    return definition;\r\n});\r\n\n","\ndefine('text!forms/fields/boolean/view.html',[],function () { return '<div class=\"form-group <%= visible %>\">\\r\\n    <% if ( !Inline ){ %>\\r\\n    <label class=\"control-label\" data-localize=\"<%= PropertyDisplayName %>\"><span><% if ( Required ){ %> <%= \\'(\\' + localization.Required + \\')\\' %><% } %></span></label>\\r\\n    <% } %>\\r\\n\\r\\n    <div class=\"checkbox <% if ( Inline ){ %> checkbox-inline <% } else { %> checkbox-block <% } %>\">\\r\\n        <input type=\"checkbox\"\\r\\n               name=\"<%= PropertyName %>\"\\r\\n               id=\"<%= PropertyName %>\"\\r\\n               data-bind=\"checked: <%= PropertyName %>\"<% if ( Disabled ){ %>\\r\\n        disabled\\r\\n        <% } %>\\r\\n\\r\\n        />\\r\\n\\r\\n\\r\\n        <label class=\"control-label\" for=\"<%= PropertyName %>\">\\r\\n            <% if ( Inline ){ %>\\r\\n            <span data-localize=\"<%= PropertyDisplayName %>\"></span>\\r\\n            <% } %>\\r\\n        </label>\\r\\n\\r\\n    </div>\\r\\n</div>';});\n\n","/**\r\nBOOLEAN\r\n**/\r\n\r\ndefine('forms/fields/boolean/controller',['require','text!forms/fields/boolean/view.html'],function (require) {\r\n    var tpl = require(\"text!forms/fields/boolean/view.html\");\r\n   \r\n\r\n    var definition = {\r\n        template: tpl,\r\n        build: function (vm, node, callback) {\r\n            var built = _.template(tpl);\r\n\r\n            //make sure we have all the vals set\r\n            var properties = {\r\n                Disabled: node.disabled,\r\n                Required: node.Required,\r\n                Inline: node.Inline || false,\r\n                visible: (!_.isUndefined(node.IsVisible) && node.IsVisible == false ? \"hidden\" : \"\")\r\n        };\r\n            \r\n            \r\n\r\n            $.extend(true, properties, node);\r\n\r\n            callback(built(properties));\r\n        }\r\n    }\r\n\r\n    return definition;\r\n\r\n});\n","/*jslint nomen: true */\r\n/*global _, $, app, console, define, kendo, session */\r\n/*eslint no-console: [\"error\", { allow: [\"log\", \"warn\", \"error\"] }] */\r\n\r\n/**\r\nResolve Incident\r\n**/\r\n\r\ndefine('CustomSpace/Scripts/forms/tasks/resolveIncident/controller',[\r\n    \"text!forms/tasks/anchor/view.html\",\r\n    \"text!CustomSpace/Scripts/forms/tasks/resolveIncident/view.html\",\r\n    \"forms/fields/enum/controller\",\r\n    \"CustomSpace/Scripts/forms/fields/longstring/controller\",\r\n    \"forms/fields/boolean/controller\"\r\n], function (\r\n    anchorTemplate,\r\n    resolveIncidentTemplate,\r\n    enumPickerControl,\r\n    txtAreaControl,\r\n    checkBoxControl\r\n) {\r\n    \"use strict\";\r\n    var resolveIncidentTask = {\r\n            \"Task\": \"resolveIncident\",\r\n            \"Type\": \"Incident\",\r\n            \"Label\": \"Resolve Incident\",\r\n            \"Access\": session.user.Analyst === 1,\r\n            \"Configs\": {\r\n                \"ResolutionCategory\": {\r\n                    \"Id\": \"c5f6ada9-a0df-01d6-7087-6b8500ca6c2b\",\r\n                    \"Name\": \"Fixed by analyst\"\r\n                },\r\n                \"description\": {\r\n                    \"MinLength\": 4,\r\n                    \"MaxLength\": 4000,\r\n                    \"Rows\": 4\r\n                }\r\n            }\r\n        },\r\n\r\n        incidentResolutionCategoryEnumId = \"72674491-02cb-1d90-a48f-1b269eb83602\",\r\n        incidentStatusResolvedEnumId = \"2b8830b6-59f0-f574-9c2a-f4b4682f1681\",\r\n        systemDomainUserClassId = \"eca3c52a-f273-5cdc-f165-3eb95a2b26cf\",\r\n\r\n        definition = {\r\n            template: resolveIncidentTemplate,\r\n            task: resolveIncidentTask,\r\n            build: function build(vm, node, callback) {\r\n                if (!_.isUndefined(app.storage.custom) && app.storage.custom.get(\"DEBUG_ENABLED\")) {\r\n                    console.log(\"resolveIncidentTask:build\");\r\n                }\r\n                /* BEGIN Functions */\r\n                //form field helper\r\n                function buildEnumPicker(container, props, vmModel) {\r\n                    enumPickerControl.build(vmModel, props, function (enumControl) {\r\n                        container.html(enumControl);\r\n                        app.controls.apply(container, {\r\n                            localize: true,\r\n                            vm: vmModel,\r\n                            bind: true\r\n                        });\r\n                    });\r\n                }\r\n\r\n                function buildTextArea(container, props, vmModel) {\r\n                    return txtAreaControl.build(vmModel, props, function (cbTxtAreaControl) {\r\n                        container.html(cbTxtAreaControl);\r\n                        /*app.controls.apply(container, {\r\n                            localize: true,\r\n                            //vm: vmModel,\r\n                            bind: true\r\n                        });*/\r\n                    });\r\n                }\r\n\r\n                function buildCheckbox(container, props, vmModel) {\r\n                    checkBoxControl.build(vmModel, props, function (txtCheckboxControl) {\r\n                        container.html(txtCheckboxControl);\r\n                        app.controls.apply(container, {\r\n                            \"localize\": true,\r\n                            \"vm\": vmModel,\r\n                            \"bind\": true\r\n                        });\r\n                    });\r\n                }\r\n\r\n                function createPopupNotification(message) {\r\n                    var popupNotificationElm = $(\".popupNotification:first\"),\r\n                        popupNotification = popupNotificationElm.getKendoNotification(\"kendoNotification\");\r\n\r\n                    if (!_.isUndefined(popupNotification)) {\r\n                        popupNotification.hide();\r\n                    } else {\r\n                        popupNotification = popupNotificationElm.kendoNotification({\r\n                            templates: [{\r\n                                type: \"resolveIncidentNotification\",\r\n                                template: '<div class=\"success k-ext-dialog-content\"><div class=\"k-ext-dialog-icon fa fa-check\"></div><div class=\"k-ext-dialog-message\">#= message #</div></div>'\r\n                            }]\r\n                        }).data(\"kendoNotification\");\r\n                    }\r\n\r\n                    popupNotification.show({\r\n                        message: app.custom.utils.stringFormat(message, vm.viewModel.Id)\r\n                    }, \"resolveIncidentNotification\");\r\n                }\r\n\r\n                function createIncidentResolutionFields(modalWindowViewModel, modalWindowEle) {\r\n                    var resolutionProperties = {\r\n                        PropertyName: \"ResolutionCategory\",\r\n                        PropertyDisplayName: \"ResolutionCategory\",\r\n                        Required: true,\r\n                        EnumId: modalWindowViewModel.resolutionCategoryEnumId\r\n                    },\r\n                        resolutionDescriptionProperties = {\r\n                            PropertyName: \"ResolutionDescription\",\r\n                            PropertyDisplayName: \"Resolution Notes\",\r\n                            PlaceHolder: \"Resolution Notes...\",\r\n                            Required: false,\r\n                            MaxLength: node.Configs.description.MaxLength,\r\n                            CharactersRemaining: node.Configs.description.MaxLength,\r\n                            Rows: node.Configs.description.Rows\r\n                        },\r\n                        resolutionAssignToMeProperties = {\r\n                            PropertyName: \"ResolutionAssignToMe\",\r\n                            PropertyDisplayName: \"Assign To Me\",\r\n                            Inline: true,\r\n                            Disabled: false,\r\n                            Required: false,\r\n                            Checked: true\r\n                        };\r\n                    //resolution picker\r\n                    buildEnumPicker(modalWindowEle.find(\"#resolutionPicker\"), resolutionProperties, modalWindowViewModel);\r\n                    //resolution description\r\n                    buildTextArea(modalWindowEle.find(\"#resolutionDescription\"), resolutionDescriptionProperties, modalWindowViewModel);\r\n\r\n                    buildCheckbox(modalWindowEle.find(\"#resolutionAssignToMe\"), resolutionAssignToMeProperties, modalWindowViewModel);\r\n                }\r\n\r\n                // Resolve Incident\r\n                function performResolveIncident(modalWindowViewModel) {\r\n                    var actionLogType = app.controls.getWorkItemLogType(vm.viewModel),\r\n                        resolvedDateElement = $('input[name=\"ResolvedDate\"]');\r\n\r\n                    vm.viewModel.set(\"ResolutionDescription\", modalWindowViewModel.ResolutionDescription.ResolutionDescription);\r\n                    vm.viewModel.set(\"ResolutionCategory\", { Id: modalWindowViewModel.ResolutionCategory.Id });\r\n                    vm.viewModel.set(\"ResolvedDate\", new Date().toISOString());\r\n\r\n                    // Set Resolved By User\r\n                    vm.viewModel.set(\"RelatesToTroubleTicket\", {\r\n                        ClassTypeId: systemDomainUserClassId,\r\n                        BaseId: session.user.Id,\r\n                        DisplayName: session.user.Name\r\n                    });\r\n\r\n                    // Add \"Resolved Record\" comment to the Action Log\r\n                    if (actionLogType) {\r\n                        vm.viewModel[actionLogType].unshift(new app.dataModels[actionLogType].recordResolved(modalWindowViewModel.ResolutionDescription.ResolutionDescription));\r\n                    }\r\n\r\n                    // Update Resolved Date Field\r\n                    switch (resolvedDateElement.attr(\"data-control\")) {\r\n                    case \"datePicker\":\r\n                        resolvedDateElement.val(kendo.toString(new Date(), \"d\"));\r\n                        break;\r\n                    case \"dateTimePicker\":\r\n                        resolvedDateElement.val(kendo.toString(new Date(), \"g\"));\r\n                        break;\r\n                    }\r\n\r\n                    // Update Status Indicator\r\n                    vm.viewModel.set(\"Status\", {\r\n                        Id: incidentStatusResolvedEnumId,\r\n                        Name: \"Resolved\"\r\n                    });\r\n\r\n                    if (modalWindowViewModel.showResolutionAssignToMe && modalWindowViewModel.ResolutionAssignToMe) {\r\n                        vm.viewModel.AssignedWorkItem.set(\"BaseId\", session.user.Id);\r\n                        vm.viewModel.AssignedWorkItem.set(\"DisplayName\", session.user.Name);\r\n                    }\r\n\r\n                    // Resolved Popup Notification\r\n                    createPopupNotification(\"{0} has been resolved.<br/>Click Save or Apply to complete the process.\");\r\n                }\r\n\r\n                // Executes on resolution category dropdown change\r\n                function onModalUpdate(modalWindowViewModel, modalWindowEle) {\r\n                    if (\r\n                        modalWindowViewModel.ResolutionCategory.Id !== \"\" &&\r\n                            !modalWindowEle.find('div[data-role=\"ResolutionCategory\"] > span > span').hasClass(\"input-error\")\r\n                    ) {\r\n                        modalWindowViewModel.set(\"okEnabled\", true);\r\n                    } else {\r\n                        modalWindowViewModel.set(\"okEnabled\", false);\r\n                    }\r\n                }\r\n\r\n                // Executes when modal dialog is opening\r\n                function onModalActivate(modalWindowViewModel, modalWindowEle) {\r\n                    modalWindowEle.find(\"textarea[name='ResolutionDescription']\").focus();\r\n                    onModalUpdate(modalWindowViewModel, modalWindowEle);\r\n                }\r\n\r\n                function bindResolutionCategoryFieldEvents(modalWindowViewModel, modalWindowEle) {\r\n                    var resolutionCategoryDropDownTreeViewControl = modalWindowEle.find('div[data-role=\"ResolutionCategory\"]').data(\"kendoExtDropDownTreeViewV3\");\r\n\r\n                    function onModalUpdateHandler() {\r\n                        onModalUpdate(modalWindowViewModel, modalWindowEle);\r\n                    }\r\n\r\n                    resolutionCategoryDropDownTreeViewControl._dropdown.input.keyup(onModalUpdateHandler);\r\n                    resolutionCategoryDropDownTreeViewControl.bind(\"change\", onModalUpdateHandler);\r\n                    resolutionCategoryDropDownTreeViewControl._dropdown.bind(\"change\", onModalUpdateHandler);\r\n                    resolutionCategoryDropDownTreeViewControl._treeview.bind(\"change\", onModalUpdateHandler);\r\n                }\r\n                \r\n                function isAssignedToMe() {\r\n                    var assignedUserId = vm.viewModel.AssignedWorkItem.get(\"BaseId\");\r\n                    return (assignedUserId === session.user.Id);\r\n                }\r\n\r\n                // Template .build() and view.renderererers.\r\n                var buildAndRender = {\r\n                    windowEle: function windowEle(windowTemplate) {\r\n                        //build the template for the window\r\n                        var builtModal = _.template(windowTemplate),\r\n                            ele = new kendo.View(builtModal(), {\r\n                                \"wrap\": false\r\n                            });\r\n                        //send hidden window back to caller (appended in the callback)\r\n                        if (typeof callback === \"function\") {\r\n                            callback(ele.render());\r\n                        }\r\n                        return ele;\r\n                    },\r\n                    taskListItem: function taskListItem(properties, anchorViewModel, template) {\r\n                        $.extend(true, properties, node);\r\n                        //build the anchor and bind viewModel to it\r\n                        var builtAnchor = _.template(template),\r\n                            anchorElm = new kendo.View(builtAnchor(properties), {\r\n                                \"wrap\": false,\r\n                                \"model\": anchorViewModel\r\n                            });\r\n                        //send anchor element back to caller (appended in the callback)\r\n                        if (typeof callback === \"function\") {\r\n                            callback(anchorElm.render());\r\n                        }\r\n                        return anchorElm;\r\n                    }\r\n                };\r\n\r\n                function getFormTaskViewModel(modalEle) {\r\n                    var taskVm = new kendo.observable({\r\n                        resolveIncident: function resolveIncident() {\r\n                            var currentStatus = vm.viewModel.get(\"Status\"),\r\n                                modalWindowEle,\r\n                                modalWindowControl,\r\n                                modalWindowViewModel;\r\n                            if (currentStatus.Id === incidentStatusResolvedEnumId) {\r\n                                createPopupNotification(\"{0} is already resolved.\");\r\n                                $(\"a[data-toggle][data-cid='Resolution']\").click();\r\n                            } else {\r\n                                modalWindowEle = modalEle.element; //.element.clone(),\r\n                                modalWindowControl = modalWindowEle.kendoCiresonWindow({\r\n                                    title: node.Label,\r\n                                    width: 500,\r\n                                    minWidth: 250,\r\n                                    height: 400,\r\n                                    close: function close() {},\r\n                                    activate: function activate() {\r\n                                        //on window activate bind the view model to the loaded template content\r\n                                        onModalActivate(modalWindowViewModel, modalWindowEle);\r\n                                    }/*,\r\n                                    deactivate: function deactivate() {\r\n                                        modalWindowControl.destroy();\r\n                                    }*/\r\n\r\n                                }).data(\"kendoWindow\");\r\n                                modalWindowViewModel = kendo.observable({\r\n                                    ResolutionCategory: node.Configs.ResolutionCategory,\r\n                                    resolutionCategoryEnumId: incidentResolutionCategoryEnumId,\r\n                                    showResolutionAssignToMe: !isAssignedToMe(),\r\n                                    ResolutionAssignToMe: true,\r\n                                    okEnabled: false,\r\n                                    okClick: function okClick() {\r\n                                        performResolveIncident(modalWindowViewModel);\r\n                                        modalWindowControl.close();\r\n                                    },\r\n                                    cancelClick: function cancelClick() {\r\n                                        modalWindowControl.close();\r\n                                    }\r\n                                });\r\n\r\n                                kendo.bind(modalWindowEle, modalWindowViewModel);\r\n\r\n                                createIncidentResolutionFields(modalWindowViewModel, modalWindowEle);\r\n                                bindResolutionCategoryFieldEvents(modalWindowViewModel, modalWindowEle);\r\n\r\n                                if (!_.isUndefined(app.storage.custom) && app.storage.custom.get(\"DEBUG_ENABLED\")) {\r\n                                    console.log(\"resolveIncidentTask:resolveIncident\", {\r\n                                        modalWindowEle: modalWindowEle,\r\n                                        modalWindowControl: modalWindowControl,\r\n                                        modalWindowViewModel: modalWindowViewModel\r\n                                    });\r\n                                }\r\n\r\n                                modalWindowEle.removeClass(\"hide\");\r\n                                modalWindowEle.show();\r\n                                modalWindowControl.wrapper.css(\"padding-bottom\", \"65px\");\r\n                                modalWindowControl.open();\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    return taskVm;\r\n                }\r\n                /* END functions */\r\n\r\n                /* Initialization code */\r\n                function initFormTask() {\r\n                    var modalEle = buildAndRender.windowEle(resolveIncidentTemplate),\r\n                        formTaskViewModel = getFormTaskViewModel(modalEle),\r\n                        anchorTemplateProps = { Target: node.Task };\r\n                    buildAndRender.taskListItem(anchorTemplateProps, formTaskViewModel, anchorTemplate);\r\n                }\r\n\r\n                initFormTask();\r\n            }\r\n        };\r\n\r\n    return definition;\r\n});\n","/*jslint nomen: true */\r\n/*global $, _, app, console, define, performance */\r\n/*eslint no-console: [\"error\", { allow: [\"log\", \"warn\", \"error\"] }] */\r\n\r\n/**\r\nCustom Work Item Task Builder\r\n**/\r\n\r\ndefine('CustomSpace/Scripts/forms/wiTaskBuilder',[\r\n    \"CustomSpace/Scripts/forms/tasks/resolveIncident/controller\"\r\n], function () {\r\n    \"use strict\";\r\n    var taskModules = arguments,\r\n        definition = {\r\n            build: function build(vm, callback) {\r\n                var ulElement = $(\".taskmenu\"),\r\n                    taskCallback = function (view) {\r\n                        ulElement.append(view);\r\n                    };\r\n\r\n                if (!_.isUndefined(app.storage.custom) && app.storage.custom.get(\"DEBUG_ENABLED\")) {\r\n                    console.log(\"wiTaskBuilder:build\", {\r\n                        \"performance\": performance.now(),\r\n                        \"vm\": vm,\r\n                        \"taskModules\": taskModules\r\n                    });\r\n                }\r\n\r\n                _.each(taskModules, function (taskModule) {\r\n                    // vm.taskTemplate.tasks.push(taskModule.task);\r\n\r\n                    if (taskModule.task.Access && taskModule.task.Type.indexOf(vm.type) !== -1) {\r\n                        taskModule.build(vm, taskModule.task, function (view) {\r\n                            taskCallback(view);\r\n                        });\r\n                    }\r\n                });\r\n\r\n                //send back <ul> with <li> of each task\r\n                if (typeof callback === \"function\") {\r\n                    callback(ulElement);\r\n                }\r\n            }\r\n        };\r\n\r\n    return definition;\r\n});\n","/*jslint nomen: true */\r\n/*global _, app, console, pageForm, performance, require */\r\n/*eslint no-console: [\"error\", { allow: [\"log\", \"warn\", \"error\"] }] */\r\n\r\n/**\r\nLoad Custom Work Item Task Builder\r\n**/\r\n\r\nrequire.config({\r\n    waitSeconds: 0,\r\n    urlArgs: \"v=\" + ((typeof session !== \"undefined\" && typeof session.staticFileVersion !== \"undefined\") ? session.staticFileVersion : 894),\r\n    baseUrl: \"/Scripts/\",\r\n    paths: {\r\n        \"text\": \"require/text\",\r\n        \"CustomSpace\": \"../CustomSpace\"\r\n    }\r\n});\r\n\r\nrequire([\r\n    \"CustomSpace/Scripts/forms/wiTaskBuilder\"\r\n], function (\r\n    wiTaskBuilder\r\n) {\r\n    \"use strict\";\r\n    if (!_.isUndefined(app.storage.custom) && app.storage.custom.get(\"DEBUG_ENABLED\")) {\r\n        console.log(\"wiTaskMain\", performance.now());\r\n    }\r\n\r\n    function initTasks() {\r\n        if (!_.isUndefined(app.storage.custom) && app.storage.custom.get(\"DEBUG_ENABLED\")) {\r\n            console.log(\"wiTaskMain:initTasks\", performance.now());\r\n        }\r\n        \r\n        var isClosed = false,\r\n            ServiceRequestStatus_Closed = \"c7b65747-f99e-c108-1e17-3c1062138fc4\",\r\n            ChangeStatus_Closed = \"f228d50b-2b5a-010f-b1a4-5c7d95703a9b\",\r\n            IncidentStatus_Closed = \"bd0ae7c4-3315-2eb3-7933-82dfc482dbaf\",\r\n            ProblemStatus_Closed = \"25eac210-e091-8ae8-a713-fea2472f32ff\",\r\n            ReleaseRecordStatus_Closed = \"221155fc-ad9f-1e40-c50e-9028ee303137\";\r\n\r\n        // Check if form is disabled\r\n        if (!pageForm.newWI) {\r\n            // If status is closed then do not add tasks\r\n            if (\r\n                pageForm.viewModel.Status.Id === ServiceRequestStatus_Closed ||\r\n                    pageForm.viewModel.Status.Id === ChangeStatus_Closed ||\r\n                    pageForm.viewModel.Status.Id === IncidentStatus_Closed ||\r\n                    pageForm.viewModel.Status.Id === ProblemStatus_Closed ||\r\n                    pageForm.viewModel.Status.Id === ReleaseRecordStatus_Closed\r\n            ) {\r\n                isClosed = true;\r\n            }\r\n        }\r\n\r\n        if (!isClosed) {\r\n            // Build out custom Work Item tasks\r\n            wiTaskBuilder.build(pageForm, function (view) {\r\n                app.custom.utils.sortList(view);\r\n                app.events.publish(\"wiTasksReady\");\r\n            });\r\n        }\r\n    }\r\n\r\n    app.events.subscribe(\"boundReadyReady\", function execInitTasks() {\r\n        \"use strict\";\r\n        if (!_.isUndefined(app.storage.custom) && app.storage.custom.get(\"DEBUG_ENABLED\")) {\r\n            console.log(\"wiTaskMain:boundReady\", performance.now());\r\n        }\r\n        pageForm.boundReady(function () {\r\n            initTasks();\r\n            // Unsubscibe from further boundReady events\r\n            app.events.unsubscribe(\"boundReadyReady\", execInitTasks);\r\n        });\r\n    });\r\n});\ndefine(\"CustomSpace/Scripts/forms/wiTaskMain\", function(){});\n\n"]}