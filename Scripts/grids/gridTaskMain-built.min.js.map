{"version":3,"sources":["../../Scripts/require/text.js","grids/tasks/view.html!text","grids/tasks/listItemTask.html!text","grids/tasks/listItemLink.html!text","grids/gridTaskBuilder.js","grids/gridTaskMain.js"],"names":["define","module","text","fs","Cc","Ci","xpcIsWindows","progIds","xmlRegExp","bodyRegExp","hasLocation","location","href","defaultProtocol","protocol","replace","defaultHostName","hostname","defaultPort","port","undefined","buildMap","masterConfig","config","version","strip","content","matches","match","jsEscape","createXhr","xhr","i","progId","XMLHttpRequest","ActiveXObject","e","parseName","name","modName","ext","temp","index","indexOf","isRelative","substring","length","moduleName","xdRegExp","useXhr","url","uProtocol","uHostName","uPort","exec","split","toLowerCase","finishLoad","onLoad","isBuild","load","req","inlineText","parsed","nonStripName","toUrl","get","err","error","write","pluginName","hasOwnProperty","asModule","writeFile","extPart","fileName","value","textWrite","contents","env","process","versions","node","require","nodeRequire","callback","errback","file","readFileSync","headers","header","open","setRequestHeader","onXhr","onreadystatechange","evt","status","readyState","Error","responseText","onXhrComplete","send","Packages","java","stringBuffer","line","io","File","lineSeparator","lang","System","getProperty","input","BufferedReader","InputStreamReader","FileInputStream","StringBuffer","readLine","charAt","append","String","toString","close","Components","classes","interfaces","utils","inStream","convertStream","fileObj","readData","FileUtils","createInstance","nsIFileInputStream","init","nsIConverterInputStream","available","DEFAULT_REPLACEMENT_CHARACTER","readString","path","cellTemplate","listItemTaskTemplate","listItemLinkTemplate","_","isUndefined","app","storage","custom","console","log","built","build","getGridTaskViewModel","kendo","observable","add","gridData","field","type","template","that","this","taskColumn","$","grep","columns","colValue","colIndex","Object","defineProperty","enumerable","writable","data","existingTask","extend","push","gridTask","taskValue","taskIndex","itemEle","bClickPropagation","item","closest","itemData","itemRowEle","dataItem","event","task","stopPropagation","updateGrid","bUpdateGridTemplate","each","column","cell","rowTemplate","_tmpl","options","altRowTemplate","refresh","gridTasks","buildTemplate","listItem","link","properties","icon","className","target","builtLink","builtTask","gridTaskViewModel","waitSeconds","urlArgs","session","staticFileVersion","baseUrl","paths","CustomSpace","gridTaskBuilder","performance","now","events","subscribe","publish"],"mappings":"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","file":"gridTaskMain-built.min.js","sourcesContent":["/**\r\n * @license RequireJS text 2.0.10 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\r\n * Available via the MIT or new BSD license.\r\n * see: http://github.com/requirejs/text for details\r\n */\r\n/*jslint regexp: true */\r\n/*global require, XMLHttpRequest, ActiveXObject,\r\n  define, window, process, Packages,\r\n  java, location, Components, FileUtils */\r\n\r\ndefine('text',['module'], function (module) {\r\n    'use strict';\r\n\r\n    var text, fs, Cc, Ci, xpcIsWindows,\r\n        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],\r\n        xmlRegExp = /^\\s*<\\?xml(\\s)+version=[\\'\\\"](\\d)*.(\\d)*[\\'\\\"](\\s)*\\?>/im,\r\n        bodyRegExp = /<body[^>]*>\\s*([\\s\\S]+)\\s*<\\/body>/im,\r\n        hasLocation = typeof location !== 'undefined' && location.href,\r\n        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\\:/, ''),\r\n        defaultHostName = hasLocation && location.hostname,\r\n        defaultPort = hasLocation && (location.port || undefined),\r\n        buildMap = {},\r\n        masterConfig = (module.config && module.config()) || {};\r\n\r\n    text = {\r\n        version: '2.0.10',\r\n\r\n        strip: function (content) {\r\n            //Strips <?xml ...?> declarations so that external SVG and XML\r\n            //documents can be added to a document without worry. Also, if the string\r\n            //is an HTML document, only the part inside the body tag is returned.\r\n            if (content) {\r\n                content = content.replace(xmlRegExp, \"\");\r\n                var matches = content.match(bodyRegExp);\r\n                if (matches) {\r\n                    content = matches[1];\r\n                }\r\n            } else {\r\n                content = \"\";\r\n            }\r\n            return content;\r\n        },\r\n\r\n        jsEscape: function (content) {\r\n            return content.replace(/(['\\\\])/g, '\\\\$1')\r\n                .replace(/[\\f]/g, \"\\\\f\")\r\n                .replace(/[\\b]/g, \"\\\\b\")\r\n                .replace(/[\\n]/g, \"\\\\n\")\r\n                .replace(/[\\t]/g, \"\\\\t\")\r\n                .replace(/[\\r]/g, \"\\\\r\")\r\n                .replace(/[\\u2028]/g, \"\\\\u2028\")\r\n                .replace(/[\\u2029]/g, \"\\\\u2029\");\r\n        },\r\n\r\n        createXhr: masterConfig.createXhr || function () {\r\n            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.\r\n            var xhr, i, progId;\r\n            if (typeof XMLHttpRequest !== \"undefined\") {\r\n                return new XMLHttpRequest();\r\n            } else if (typeof ActiveXObject !== \"undefined\") {\r\n                for (i = 0; i < 3; i += 1) {\r\n                    progId = progIds[i];\r\n                    try {\r\n                        xhr = new ActiveXObject(progId);\r\n                    } catch (e) { }\r\n\r\n                    if (xhr) {\r\n                        progIds = [progId];  // so faster next time\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return xhr;\r\n        },\r\n\r\n        /**\r\n         * Parses a resource name into its component parts. Resource names\r\n         * look like: module/name.ext!strip, where the !strip part is\r\n         * optional.\r\n         * @param {String} name the resource name\r\n         * @returns {Object} with properties \"moduleName\", \"ext\" and \"strip\"\r\n         * where strip is a boolean.\r\n         */\r\n        parseName: function (name) {\r\n            var modName, ext, temp,\r\n                strip = false,\r\n                index = name.indexOf(\".\"),\r\n                isRelative = name.indexOf('./') === 0 ||\r\n                             name.indexOf('../') === 0;\r\n\r\n            if (index !== -1 && (!isRelative || index > 1)) {\r\n                modName = name.substring(0, index);\r\n                ext = name.substring(index + 1, name.length);\r\n            } else {\r\n                modName = name;\r\n            }\r\n\r\n            temp = ext || modName;\r\n            index = temp.indexOf(\"!\");\r\n            if (index !== -1) {\r\n                //Pull off the strip arg.\r\n                strip = temp.substring(index + 1) === \"strip\";\r\n                temp = temp.substring(0, index);\r\n                if (ext) {\r\n                    ext = temp;\r\n                } else {\r\n                    modName = temp;\r\n                }\r\n            }\r\n\r\n            return {\r\n                moduleName: modName,\r\n                ext: ext,\r\n                strip: strip\r\n            };\r\n        },\r\n\r\n        xdRegExp: /^((\\w+)\\:)?\\/\\/([^\\/\\\\]+)/,\r\n\r\n        /**\r\n         * Is an URL on another domain. Only works for browser use, returns\r\n         * false in non-browser environments. Only used to know if an\r\n         * optimized .js version of a text resource should be loaded\r\n         * instead.\r\n         * @param {String} url\r\n         * @returns Boolean\r\n         */\r\n        useXhr: function (url, protocol, hostname, port) {\r\n            var uProtocol, uHostName, uPort,\r\n                match = text.xdRegExp.exec(url);\r\n            if (!match) {\r\n                return true;\r\n            }\r\n            uProtocol = match[2];\r\n            uHostName = match[3];\r\n\r\n            uHostName = uHostName.split(':');\r\n            uPort = uHostName[1];\r\n            uHostName = uHostName[0];\r\n\r\n            return (!uProtocol || uProtocol === protocol) &&\r\n                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&\r\n                   ((!uPort && !uHostName) || uPort === port);\r\n        },\r\n\r\n        finishLoad: function (name, strip, content, onLoad) {\r\n            content = strip ? text.strip(content) : content;\r\n            if (masterConfig.isBuild) {\r\n                buildMap[name] = content;\r\n            }\r\n            onLoad(content);\r\n        },\r\n\r\n        load: function (name, req, onLoad, config) {\r\n            //Name has format: some.module.filext!strip\r\n            //The strip part is optional.\r\n            //if strip is present, then that means only get the string contents\r\n            //inside a body tag in an HTML string. For XML/SVG content it means\r\n            //removing the <?xml ...?> declarations so the content can be inserted\r\n            //into the current doc without problems.\r\n\r\n            // Do not bother with the work if a build and text will\r\n            // not be inlined.\r\n            if (config.isBuild && !config.inlineText) {\r\n                onLoad();\r\n                return;\r\n            }\r\n\r\n            masterConfig.isBuild = config.isBuild;\r\n\r\n            var parsed = text.parseName(name),\r\n                nonStripName = parsed.moduleName +\r\n                    (parsed.ext ? '.' + parsed.ext : ''),\r\n                url = req.toUrl(nonStripName),\r\n                useXhr = (masterConfig.useXhr) ||\r\n                         text.useXhr;\r\n\r\n            // Do not load if it is an empty: url\r\n            if (url.indexOf('empty:') === 0) {\r\n                onLoad();\r\n                return;\r\n            }\r\n\r\n            //Load the text. Use XHR if possible and in a browser.\r\n            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {\r\n                text.get(url, function (content) {\r\n                    text.finishLoad(name, parsed.strip, content, onLoad);\r\n                }, function (err) {\r\n                    if (onLoad.error) {\r\n                        onLoad.error(err);\r\n                    }\r\n                });\r\n            } else {\r\n                //Need to fetch the resource across domains. Assume\r\n                //the resource has been optimized into a JS module. Fetch\r\n                //by the module name + extension, but do not include the\r\n                //!strip part to avoid file system issues.\r\n                req([nonStripName], function (content) {\r\n                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,\r\n                                    parsed.strip, content, onLoad);\r\n                });\r\n            }\r\n        },\r\n\r\n        write: function (pluginName, moduleName, write, config) {\r\n            if (buildMap.hasOwnProperty(moduleName)) {\r\n                var content = text.jsEscape(buildMap[moduleName]);\r\n                write.asModule(pluginName + \"!\" + moduleName,\r\n                               \"define(function () { return '\" +\r\n                                   content +\r\n                               \"';});\\n\");\r\n            }\r\n        },\r\n\r\n        writeFile: function (pluginName, moduleName, req, write, config) {\r\n            var parsed = text.parseName(moduleName),\r\n                extPart = parsed.ext ? '.' + parsed.ext : '',\r\n                nonStripName = parsed.moduleName + extPart,\r\n                //Use a '.js' file name so that it indicates it is a\r\n                //script that can be loaded across domains.\r\n                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';\r\n\r\n            //Leverage own load() method to load plugin value, but only\r\n            //write out values that do not have the strip argument,\r\n            //to avoid any potential issues with ! in file names.\r\n            text.load(nonStripName, req, function (value) {\r\n                //Use own write() method to construct full module value.\r\n                //But need to create shell that translates writeFile's\r\n                //write() to the right interface.\r\n                var textWrite = function (contents) {\r\n                    return write(fileName, contents);\r\n                };\r\n                textWrite.asModule = function (moduleName, contents) {\r\n                    return write.asModule(moduleName, fileName, contents);\r\n                };\r\n\r\n                text.write(pluginName, nonStripName, textWrite, config);\r\n            }, config);\r\n        }\r\n    };\r\n\r\n    if (masterConfig.env === 'node' || (!masterConfig.env &&\r\n            typeof process !== \"undefined\" &&\r\n            process.versions &&\r\n            !!process.versions.node &&\r\n            !process.versions['node-webkit'])) {\r\n        //Using special require.nodeRequire, something added by r.js.\r\n        fs = require.nodeRequire('fs');\r\n\r\n        text.get = function (url, callback, errback) {\r\n            try {\r\n                var file = fs.readFileSync(url, 'utf8');\r\n                //Remove BOM (Byte Mark Order) from utf8 files if it is there.\r\n                if (file.indexOf('\\uFEFF') === 0) {\r\n                    file = file.substring(1);\r\n                }\r\n                callback(file);\r\n            } catch (e) {\r\n                errback(e);\r\n            }\r\n        };\r\n    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&\r\n            text.createXhr())) {\r\n        text.get = function (url, callback, errback, headers) {\r\n            var xhr = text.createXhr(), header;\r\n            xhr.open('GET', url, true);\r\n\r\n            //Allow plugins direct access to xhr headers\r\n            if (headers) {\r\n                for (header in headers) {\r\n                    if (headers.hasOwnProperty(header)) {\r\n                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            //Allow overrides specified in config\r\n            if (masterConfig.onXhr) {\r\n                masterConfig.onXhr(xhr, url);\r\n            }\r\n\r\n            xhr.onreadystatechange = function (evt) {\r\n                var status, err;\r\n                //Do not explicitly handle errors, those should be\r\n                //visible via console output in the browser.\r\n                if (xhr.readyState === 4) {\r\n                    status = xhr.status;\r\n                    if (status > 399 && status < 600) {\r\n                        //An http 4xx or 5xx error. Signal an error.\r\n                        err = new Error(url + ' HTTP status: ' + status);\r\n                        err.xhr = xhr;\r\n                        errback(err);\r\n                    } else {\r\n                        callback(xhr.responseText);\r\n                    }\r\n\r\n                    if (masterConfig.onXhrComplete) {\r\n                        masterConfig.onXhrComplete(xhr, url);\r\n                    }\r\n                }\r\n            };\r\n            xhr.send(null);\r\n        };\r\n    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&\r\n            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {\r\n        //Why Java, why is this so awkward?\r\n        text.get = function (url, callback) {\r\n            var stringBuffer, line,\r\n                encoding = \"utf-8\",\r\n                file = new java.io.File(url),\r\n                lineSeparator = java.lang.System.getProperty(\"line.separator\"),\r\n                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),\r\n                content = '';\r\n            try {\r\n                stringBuffer = new java.lang.StringBuffer();\r\n                line = input.readLine();\r\n\r\n                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324\r\n                // http://www.unicode.org/faq/utf_bom.html\r\n\r\n                // Note that when we use utf-8, the BOM should appear as \"EF BB BF\", but it doesn't due to this bug in the JDK:\r\n                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058\r\n                if (line && line.length() && line.charAt(0) === 0xfeff) {\r\n                    // Eat the BOM, since we've already found the encoding on this file,\r\n                    // and we plan to concatenating this buffer with others; the BOM should\r\n                    // only appear at the top of a file.\r\n                    line = line.substring(1);\r\n                }\r\n\r\n                if (line !== null) {\r\n                    stringBuffer.append(line);\r\n                }\r\n\r\n                while ((line = input.readLine()) !== null) {\r\n                    stringBuffer.append(lineSeparator);\r\n                    stringBuffer.append(line);\r\n                }\r\n                //Make sure we return a JavaScript string and not a Java string.\r\n                content = String(stringBuffer.toString()); //String\r\n            } finally {\r\n                input.close();\r\n            }\r\n            callback(content);\r\n        };\r\n    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&\r\n            typeof Components !== 'undefined' && Components.classes &&\r\n            Components.interfaces)) {\r\n        //Avert your gaze!\r\n        Cc = Components.classes,\r\n        Ci = Components.interfaces;\r\n        Components.utils['import']('resource://gre/modules/FileUtils.jsm');\r\n        xpcIsWindows = ('@mozilla.org/windows-registry-key;1' in Cc);\r\n\r\n        text.get = function (url, callback) {\r\n            var inStream, convertStream, fileObj,\r\n                readData = {};\r\n\r\n            if (xpcIsWindows) {\r\n                url = url.replace(/\\//g, '\\\\');\r\n            }\r\n\r\n            fileObj = new FileUtils.File(url);\r\n\r\n            //XPCOM, you so crazy\r\n            try {\r\n                inStream = Cc['@mozilla.org/network/file-input-stream;1']\r\n                           .createInstance(Ci.nsIFileInputStream);\r\n                inStream.init(fileObj, 1, 0, false);\r\n\r\n                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']\r\n                                .createInstance(Ci.nsIConverterInputStream);\r\n                convertStream.init(inStream, \"utf-8\", inStream.available(),\r\n                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);\r\n\r\n                convertStream.readString(inStream.available(), readData);\r\n                convertStream.close();\r\n                inStream.close();\r\n                callback(readData.value);\r\n            } catch (e) {\r\n                throw new Error((fileObj && fileObj.path || '') + ': ' + e);\r\n            }\r\n        };\r\n    }\r\n    return text;\r\n});\n","\ndefine('text!CustomSpace/Scripts/grids/tasks/view.html',[],function () { return '<div class=\"ra-grid-task-container\" style=\"<%= _style().replace(/ {4}/g,\"\") %>\">\\r\\n    <ul class=\"ra-grid-task-menu\">\\r\\n        <% _.forEach(_tasks, function (task) { %>\\r\\n            <%= task.template(obj, task).replace(/ {4}/g,\"\") %>\\r\\n        <% }) %>\\r\\n    </ul>\\r\\n    <span class=\"ra-grid-task-content\">#: <%= field %> #</span>\\r\\n</div>';});\n\n","\ndefine('text!CustomSpace/Scripts/grids/tasks/listItemTask.html',[],function () { return '<li class=\"ra-grid-task-item\" data-task=\"<%= task %>\" data-field=\"<%= field %>\" onclick=\"app.custom.gridTasks.callback(event, this, <%= bClickPropagation %>);\">\\r\\n    <a class=\"ra-icon ra-grid-task-icon\">\\r\\n        <i class=\"fa <%= icon %>\"></i>\\r\\n    </a>\\r\\n</li>';});\n\n","\ndefine('text!CustomSpace/Scripts/grids/tasks/listItemLink.html',[],function () { return '<li class=\"ra-grid-task-item <%= className %>\" data-task=\"<%= task %>\" data-field=\"<%= field %>\" onclick=\"app.custom.gridTasks.callback(event, this, <%= bClickPropagation %>);\">\\r\\n    <a class=\"ra-icon ra-grid-task-icon\" href=\"<%= href %>\" target=\"<%= target %>\" >\\r\\n        <i class=\"fa <%= icon %>\"></i>\\r\\n    </a>\\r\\n</li>';});\n\n","/*jslint nomen: true */\r\n/*global _, $, app, console, define, document, kendo, setTimeout */\r\n/*eslint no-console: [\"error\", { allow: [\"log\", \"warn\", \"error\"] }] */\r\n\r\n/**\r\nCustom Grid Task Builder\r\n**/\r\n\r\ndefine('CustomSpace/Scripts/grids/gridTaskBuilder',[\r\n\t\"text!CustomSpace/Scripts/grids/tasks/view.html\",\r\n\t\"text!CustomSpace/Scripts/grids/tasks/listItemTask.html\",\r\n\t\"text!CustomSpace/Scripts/grids/tasks/listItemLink.html\"\r\n], function (\r\n\tcellTemplate,\r\n\tlistItemTaskTemplate,\r\n\tlistItemLinkTemplate\r\n) {\r\n    if (!_.isUndefined(app.storage.custom) && app.storage.custom.get(\"debug\")) {\r\n        console.log(\"gridTaskBuilder:define\", {\r\n            \"cellTemplate\": cellTemplate,\r\n            \"listItemTaskTemplate\": listItemTaskTemplate,\r\n            \"listItemLinkTemplate\": listItemLinkTemplate\r\n        });\r\n    }\r\n\r\n\tvar definition = {\r\n\t\t\"built\": false,\r\n\t\t\"build\": function build(callback){\r\n\t\t\tif (!_.isUndefined(app.storage.custom) && app.storage.custom.get(\"debug\")) {\r\n\t\t\t\tconsole.log(\"gridTaskBuilder:build\");\r\n\t\t\t}\r\n\t\t\t/* BEGIN Functions */\r\n\t\t\tfunction getGridTaskViewModel() {\r\n\t\t\t\tvar gridTaskVm = new kendo.observable({\r\n                    \"add\": function add (gridData, field, type, name, template, callback) {\r\n                        var that = this,\r\n                            // Look for provided column in grid by field name\r\n                            taskColumn = $.grep(gridData.columns, function (colValue, colIndex) {\r\n                                return colValue.field === field;\r\n                            })[0];\r\n\r\n                        if (!_.isUndefined(taskColumn)) {\r\n                            if (_.isUndefined(taskColumn[\"_style\"])) {\r\n                                // Add default blank style template function to column template\r\n                                Object.defineProperty(\r\n                                    taskColumn,\r\n                                    \"_style\", {\r\n                                    enumerable: false,\r\n                                    writable: true,\r\n                                    value: function defaultStyle (data) { return \"\"; }\r\n                                });\r\n                            }\r\n\r\n                            if (_.isUndefined(taskColumn[\"_tasks\"])) {\r\n                                // Add empty tasks array to column template\r\n                                Object.defineProperty(\r\n                                    taskColumn,\r\n                                    \"_tasks\", {\r\n                                    enumerable: false,\r\n                                    writable: true,\r\n                                    value: []\r\n                                });\r\n                            }\r\n\r\n                            switch (type) {\r\n                                case \"style\":\r\n                                    // Set style template function to provided template\r\n                                    taskColumn[\"_style\"] = template\r\n                                    break\r\n                                case \"task\":\r\n                                    var existingTask = that.get(gridData, field, name);\r\n                                    if (existingTask) {\r\n                                        // Merge new task with existing one in the column template\r\n                                        $.extend(existingTask, {\r\n                                            name : name,\r\n                                            template: template,\r\n                                            callback: callback\r\n                                        });\r\n                                    } else {\r\n                                        // Add new task to the column template\r\n                                        taskColumn[\"_tasks\"].push({\r\n                                            name : name,\r\n                                            template: template,\r\n                                            callback: callback\r\n                                        });\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        } else {\r\n                            console.log(\"gridTasks:add\", \"Warning! Unable to find field '\" + field + \"'.\");\r\n                        }\r\n                    },\r\n                    \"get\": function get (gridData, field, name) {\r\n                        // Look for provided column in grid by field name\r\n                        var taskColumn = $.grep(gridData.columns, function (colValue, colIndex) {\r\n                            return colValue.field === field;\r\n                        })[0];\r\n\r\n                        if (!_.isUndefined(taskColumn)) {\r\n                            if (_.isUndefined(name)) {\r\n                                // Return all tasks for the provided field\r\n                                return taskColumn[\"_tasks\"];\r\n                            } else {\r\n                                // Look for the specific task named in the provided field\r\n                                var gridTask = $.grep(taskColumn[\"_tasks\"], function (taskValue, taskIndex) {\r\n                                    return taskValue.name === name;\r\n                                })[0];\r\n\r\n                                if (!_.isUndefined(gridTask)) {\r\n                                    // Return the specific task in the provided field\r\n                                    return gridTask;\r\n                                } else {\r\n                                    console.log(\"gridTasks:get\", \"Warning! Unable to find task '\" + name + \"' in field '\" + field + \"'.\");\r\n                                    return null;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            console.log(\"gridTasks:get\", \"Warning! Unable to find field '\" + field + \"'.\");\r\n                            return null;\r\n                        }\r\n                    },\r\n                    // item is the task element clicked, bClickPropagation determines if click event should propagate\r\n                    \"callback\": function callback (e, itemEle, bClickPropagation) {\r\n                        var that = this,\r\n                            item = $(itemEle),\r\n                            gridData = item.closest(\"div[data-role='grid']\").data(\"kendoGrid\"),\r\n                            itemData = item.data(),\r\n                            itemRowEle = item.closest(\"tr\").get(0),\r\n                            dataItem = gridData.dataItem(itemRowEle),\r\n                            data = {\r\n                                \"event\": e,\r\n                                \"gridData\": gridData,\r\n                                \"itemRowEle\": itemRowEle,\r\n                                \"dataItem\": dataItem,\r\n                                \"itemData\": itemData\r\n                            }\r\n\r\n                        console.log(\"gridTasks:callback\", data);\r\n\r\n                        var existingTask = that.get(gridData, itemData.field, itemData.task);\r\n                        if (existingTask) {\r\n                            // Stop click propagation for jQuery click events if requested\r\n                            if (!bClickPropagation) {\r\n                                e.stopPropagation();\r\n                            }\r\n                            \r\n                            if (typeof existingTask.callback === \"function\") {\r\n                                existingTask.callback(data);\r\n                            }\r\n                        } else {\r\n                            console.log(\"gridTasks:callback\", \"Unable to find task for callback.\");\r\n                        }\r\n                    },\r\n                    \"updateGrid\": function updateGrid (gridData) {\r\n                        var that = this,\r\n                            bUpdateGridTemplate = false;\r\n\r\n                        $.each(gridData.columns, function (colIndex, column) {\r\n                            if (!_.isUndefined(column[\"_style\"])) {\r\n                                column.template = that.template.cell(column);\r\n                                bUpdateGridTemplate = true;\r\n                            }\r\n                        });\r\n\r\n                        if (bUpdateGridTemplate) {\r\n                            // Update grid row templates if custom tasks/styles are added\r\n                            gridData.rowTemplate = gridData._tmpl(gridData.options.rowTemplate, gridData.columns);\r\n                            gridData.altRowTemplate = gridData._tmpl(gridData.options.rowTemplate, gridData.columns);\r\n\r\n                            // Refresh grid to show column template changes\r\n                            gridData.refresh();\r\n\r\n                            app.custom.gridTasks.built = true;\r\n                        }\r\n                    },\r\n                    \"template\": {\r\n\t\t\t\t\t\t\"cell\": function cell(column) {\r\n                            return buildTemplate.cell(column);\r\n                        },\r\n\t\t\t\t\t\t\"listItem\": {\r\n\t\t\t\t\t\t\t\"link\": function link(field, task, options) {\r\n\t\t\t\t\t\t\t\treturn buildTemplate.link(field, task, options);\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\"task\": function task(field, task, options) {\r\n\t\t\t\t\t\t\t\treturn buildTemplate.task(field, task, options);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn gridTaskVm;\r\n\t\t\t}\r\n\r\n\t\t\t//template .build() based on grid html templates\r\n\t\t\tvar buildTemplate = {\r\n\t\t\t\t\"cell\": function cell (column) {\r\n\t\t\t\t\tvar builtCell = _.template(cellTemplate);\r\n\t\t\t\t\treturn builtCell(column);\r\n\t\t\t\t},\r\n\t\t\t\t\"link\": function link (field, task, options) {\r\n\t\t\t\t\tvar properties = {\r\n\t\t\t\t\t\tfield: field,\r\n\t\t\t\t\t\ttask: task,\r\n\t\t\t\t\t\ticon: \"fa-external-link\",\r\n\t\t\t\t\t\tbClickPropagation: false,\r\n\t\t\t\t\t\tclassName: \"\",\r\n\t\t\t\t\t\thref: \"/\",\r\n\t\t\t\t\t\ttarget: \"_blank\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\tbuiltLink = _.template(listItemLinkTemplate);\r\n\r\n\t\t\t\t\t$.extend(properties, options);\r\n\t\t\t\t\treturn builtLink(properties);\r\n\t\t\t\t},\r\n\t\t\t\t\"task\": function task (field, task, options) {\r\n\t\t\t\t\tvar properties = {\r\n\t\t\t\t\t\tfield: field,\r\n\t\t\t\t\t\ttask: task,\r\n\t\t\t\t\t\ticon: \"fa-pencil\",\r\n\t\t\t\t\t\tbClickPropagation: true\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\tbuiltTask = _.template(listItemTaskTemplate);\r\n\r\n\t\t\t\t\t$.extend(properties, options);\r\n\t\t\t\t\treturn builtTask(properties);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t/* END Functions */\r\n\r\n\t\t\t/* Initialization Code */\r\n\t\t\tfunction initGridTask() {\r\n\t\t\t\tvar gridTaskViewModel = getGridTaskViewModel();\r\n\t\t\t\tapp.custom.gridTasks = gridTaskViewModel;\r\n\r\n                if (typeof callback === \"function\") {\r\n                    callback(gridTaskViewModel);\r\n                }\r\n\t\t\t}\r\n\r\n\t\t\tinitGridTask();\r\n\t\t}\r\n\t}\r\n\r\n\treturn definition\r\n});\r\n\n","/*jslint nomen: true */\r\n/*global $, app, console, performance, require */\r\n/*eslint no-console: [\"error\", { allow: [\"log\", \"warn\", \"error\"] }] */\r\n\r\n/**\r\nLoad Custom Grid Task Builder\r\n**/\r\n\r\nrequire.config({\r\n    waitSeconds: 0,\r\n    urlArgs: \"v=\" + session.staticFileVersion,\r\n    baseUrl: \"/Scripts/\",\r\n    paths: {\r\n        \"text\": \"require/text\",\r\n        \"CustomSpace\": \"../CustomSpace\"\r\n    }\r\n});\r\n\r\nrequire([\r\n    \"CustomSpace/Scripts/grids/gridTaskBuilder\"\r\n], function (\r\n    gridTaskBuilder\r\n) {\r\n    \"use strict\";\r\n    if (!_.isUndefined(app.storage.custom) && app.storage.custom.get(\"debug\")) {\r\n        console.log(\"gridTaskMain:define\", performance.now());\r\n    }\r\n\r\n    function initGridTasks() {\r\n        if (!_.isUndefined(app.storage.custom) && app.storage.custom.get(\"debug\")) {\r\n            console.log(\"gridTaskMain:initGridTasks\", performance.now());\r\n        }\r\n        \r\n        gridTaskBuilder.build(function (gridTaskViewModel) {\r\n            app.events.subscribe(\"dynamicPageReady\", function () {\r\n                app.events.publish(\"gridTasksReady\");\r\n            });\r\n        });\r\n    }\r\n\r\n    initGridTasks();\r\n});\ndefine(\"CustomSpace/Scripts/grids/gridTaskMain\", function(){});\n\n"]}